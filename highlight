#!/usr/bin/env perl
# vim: set tw=72 :
#
# A simple filter program to decorate patterns with ANSI escape sequences.
# See the bottom of this file for license information (MIT License).
#
# Author: Dave Goodell <davidjgoodell@gmail.com>
#
# With contributions from:
# - Scott Baker <scott@perturb.org>

use strict;
use warnings;

use Data::Dumper;
use Term::ANSIColor qw( colored color );
use Getopt::Long;
use Scalar::Util qw( looks_like_number );
#use Data::Dump::Color;

my $VERSION = "1.2";

my $default_color    = $ENV{"HIGHLIGHT_COLOR"} || "bold red";
my $color            = $default_color;
my $ignore_case      = 1;
my $case_sensitive   = undef;
my $case_insensitive = undef;
my $debug            = 0;
my @raw_filters      = ();

my $color_input;
GetOptions(
	"case_sensitive"   => \$case_sensitive,
	"case_insensitive" => \$case_insensitive,
    "color=s"          => \$color_input,
    "help"             => \&print_usage_and_exit,
    "filter=s"         => \@raw_filters,
    "debug"            => \$debug,
) or die "unable to parse options, stopped";

if ($case_sensitive) {
	$ignore_case = 0;
} elsif ($case_insensitive) {
	$ignore_case = 1;
}

my @def_colors    = (33,11,9,47,214,99,15,51,198,94); # Blue, Yellow, Red, Green, Orange, Purple, White, LightBlue, Magenta, Brown
my $def_color_num = 0;

# Respect manual color overrides in ENV or passed in
if ($ENV{"HIGHLIGHT_COLOR"}) {
	@def_colors = ($ENV{"HIGHLIGHT_COLOR"});
} elsif ($color_input) {
	@def_colors = $color_input;
}

# @colors contains raw ANSI escape sequences
my (@colors,@filters) = ();

if (@raw_filters) {
    # Build all the filter/color pairs
    foreach my $f (@raw_filters) {
        my ($filter,$color) = "";

        # If there is a comma it's a filter/color pair
        if ($f =~ /(.+?),(.*)/) {
            $color  = $1;
            $filter = $2;
        # It's just a bare word, so it gets the default color
        } else {
            $filter = $f;
            $color  = $default_color;
        }

        push(@colors,$color);
        push(@filters,$filter);

        if ($debug) {
            print "Filter: '$filter' = $color\n";
        }
    }
}

foreach my $filter (@ARGV) {
	my $index_num = $def_color_num++ % scalar(@def_colors);
	my $cnum      = $def_colors[$index_num];
	$color        = $cnum;

    push(@colors,$color);
    push(@filters,$filter);

    if ($debug) {
		my $c     = numeric_color($color,1);
		my $reset = color('reset');
        print "Filter: '$c$filter$reset' = '$color'\n";
    }
}

if ($debug) {
	print "\n";
}

local $| = 1;

if (!@ARGV && !@filters) {
    print_usage();
    die "must pass a pattern, stopped";
}

my $pattern = join '|', @ARGV;
if ($ignore_case) { $pattern = qr/$pattern/oi; }
else              { $pattern = qr/$pattern/o; }

my $reset = color('reset');

LINE:
while (my $line = <STDIN>) {
	my $bold  = "\e[48;5;m";

    if (@filters) {
        # Loop through each filter
        for (my $i = 0; $i < @filters; $i++) {
            my $f = $filters[$i];
            my $c = $colors[$i];

			# It's a number
			if (is_numeric($c)) {
				my $bold = 1;
				$c       = numeric_color($c, $bold);
			# It's a string
			} else {
				$c = color($c);
			}

			# If we're not FORCING ci or cs then we do SmartCase
			if (!defined($case_sensitive) && !defined($case_insensitive)) {
				$ignore_case = int(!has_uppercase($f));
			}

            # Search for the filter and wrap it in color
            if ($ignore_case) {
                $line =~ s/$f/$c$&$reset/ig;
            } else {
                $line =~ s/$f/$c$&$reset/g;
            }
        }
    } else {
        # sufficiently fancy values of $pattern might break this
        while ($line =~ $pattern) {
            # $` - everything before the match
            # $& - the matched text
            # $' - everything after the match
            if ($& eq '') {
                # If we hit zero-width and there's no "after", then we can't
                # just advance a character (the zero-width might
                # continuously match the empty string).  Advance to the next
                # line.
                next LINE unless $';

                # zero-width match hit and we have an "after", advance a
                # character (this could be very slow, but it should at least
                # terminate eventually!)
                print $` . substr($', 0, 1);
                $line = substr($', 1, length($')-1);
            }
            else {
                print $` . colored($&, $color);
                $line = $';
            }
        }
    }

    print $line;
}

##########################################################################

sub print_usage {
    print <<EOT;
Usage: $0 <PATTERN0> [PATTERN1...]
  or
Usage: $0 [--filter COLOR,PATTERN] [--filter COLOR,PATTERN] ...

This is highlight version $VERSION.

This program takes text via standard input and outputs it with the given
perlre(1) pattern(s) highlighted with various colors.  If no color option
is specified, it defaults to a pre-selected array of colors. This program
is similar to "grep --color PATTERN" except both matching and non-matching
lines are printed.

Passing --case-sensitive will enable case-sensitive matching. Otherwise
Vim style smartcase matching will be implemented.

If your pattern begins with a dash ('-'), you can pass a '--' argument
after any options and before your pattern to distinguish it from an
option.

EOT
}

sub print_usage_and_exit {
    print_usage();
    exit 0;
}

sub is_numeric {
	my $f = shift();
	if ($f =~ /^(\d+\.?\d*|\.\d+)$/) { return 1; }

	return 0;
}

# Set the foreground color
sub numeric_color {
    my $c    = shift();
	my $bold = shift();

	my $ret;
	if ($bold) {
		$ret .= "\e[1;38;5;${c}m";
	} else {
		$ret .= "\e[38;5;${c}m";
	}

    return $ret;
}

sub has_uppercase {
	my $str = shift();
	my $ret = 0;

	if ($str =~ /[A-Z]/) {
		$ret = 1;
	}

	return $ret;
}

# Copyright (c) 2009-2010 Dave Goodell
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
