#!/usr/bin/env perl
#
# A simple filter program to decorate patterns with ANSI escape sequences.
# Released under the MIT license
#
# Author: Dave Goodell <davidjgoodell@gmail.com>
#
# With contributions from:
# - Scott Baker <scott@perturb.org>

use strict;
use warnings;

use Data::Dumper;
use Term::ANSIColor qw( colored color );
use Getopt::Long;

my $VERSION = "1.5";

my $ignore_case      = 1;
my $case_sensitive   = undef;
my $case_insensitive = undef;
my $debug            = 0;
my @raw_filters      = ();
my $color;

GetOptions(
	"case_sensitive"   => \$case_sensitive,
	"case_insensitive" => \$case_insensitive,
	"help"             => \&print_usage_and_exit,
	"filter=s"         => \@raw_filters,
	"debug"            => \$debug,
) or die "unable to parse options, stopped";

if ($case_sensitive) {
	$ignore_case = 0;
} elsif ($case_insensitive) {
	$ignore_case = 1;
}

my @def_colors    = (33,11,9,47,214,99,15,51,198,94); # Blue, Yellow, Red, Green, Orange, Purple, White, LightBlue, Magenta, Brown
my $def_color_num = 0;
my $reset         = color('reset');

# Respect manual color overrides in ENV
if ($ENV{"HIGHLIGHT_COLORS"}) {
	@def_colors = split(/,/,$ENV{"HIGHLIGHT_COLORS"});
}

# @colors contains raw ANSI escape sequences
my (@colors,@filters);

# These are "--filter foo --filter bar" type of options
if (@raw_filters) {
	# Build all the filter/color pairs
	foreach my $f (@raw_filters) {
		my ($filter,$color);

		# If there is a comma it's a filter/color pair
		if ($f =~ /(.+?),(.*)/) {
			$color  = $1;
			$filter = $2;
			# It's just a bare word, so it gets the default color
		} else {
			$filter = $f;

			# Get the next color in the color array
			my $index_num = $def_color_num++ % scalar(@def_colors);
			$color        = $def_colors[$index_num];
		}

		push(@colors,$color);
		push(@filters,$filter);
	}
}

# These are bareword options: highlight foo bar
foreach my $filter (@ARGV) {
	# Get the next color in the array
	my $index_num = $def_color_num++ % scalar(@def_colors);
	$color        = $def_colors[$index_num];

	push(@colors,$color);
	push(@filters,$filter);
}

if ($debug) {
	my $length = longest_word(@filters);
	$length += 2; # We add two because we '' the filter below and it makes the string longer

	for (my $i = 0; $i < @filters; $i++) {
		my $color  = $colors[$i];
		my $filter = $filters[$i];

		my $c = numeric_color($color,1);
		printf("Filter: $c%${length}s$reset = '$color'\n", "'$filter'");
	}

	print "\n";
}

# Disable output buffering
local $| = 1;

# Ensure we have at least ONE thing to filter on
if (!@ARGV && !@filters) {
	print_usage();
	die "must pass a pattern, stopped";
}

my $pattern = join '|', @ARGV;
if ($ignore_case) { $pattern = qr/$pattern/oi; }
else              { $pattern = qr/$pattern/o; }

LINE:
while (my $line = <STDIN>) {
	my $bold  = "\e[48;5;m";

	if (@filters) {
		# Loop through each filter
		for (my $i = 0; $i < @filters; $i++) {
			my $f = $filters[$i];
			my $c = $colors[$i];

			# It's a number
			if (is_numeric($c)) {
				my $bold = 1;
				$c       = numeric_color($c, $bold);
				# It's a string
			} else {
				$c = color($c);
			}

			# If we're not FORCING ci or cs then we do SmartCase
			if (!defined($case_sensitive) && !defined($case_insensitive)) {
				$ignore_case = int(!has_uppercase($f));
			}

			# Search for the filter and wrap it in color
			if ($ignore_case) {
				$line =~ s/$f/$c$&$reset/ig;
			} else {
				$line =~ s/$f/$c$&$reset/g;
			}
		}
	} else {
		# sufficiently fancy values of $pattern might break this
		while ($line =~ $pattern) {
			# $` - everything before the match
			# $& - the matched text
			# $' - everything after the match
			if ($& eq '') {
				# If we hit zero-width and there's no "after", then we can't
				# just advance a character (the zero-width might
				# continuously match the empty string).  Advance to the next
				# line.
				next LINE unless $';

				# zero-width match hit and we have an "after", advance a
				# character (this could be very slow, but it should at least
				# terminate eventually!)
				print $` . substr($', 0, 1);
				$line = substr($', 1, length($')-1);
			}
			else {
				print $` . colored($&, $color);
				$line = $';
			}
		}
	}

	print $line;
}

##########################################################################

sub print_usage {
    print <<EOT;
Usage: $0 <PATTERN0> [PATTERN1...]
  or
Usage: $0 [--filter COLOR,PATTERN] [--filter COLOR,PATTERN] ...

This is highlight version $VERSION.

This program takes text via standard input and outputs it with the given
perlre(1) pattern(s) highlighted with various colors.  If no color option
is specified, it defaults to a pre-selected array of colors. This program
is similar to "grep --color PATTERN" except both matching and non-matching
lines are printed.

Passing --case_sensitive will enable case-sensitive matching. Otherwise
Vim style smartcase matching will be implemented.

If your pattern begins with a dash ('-'), you can pass a '--' argument
after any options and before your pattern to distinguish it from an
option.

EOT
}

sub print_usage_and_exit {
	print_usage();
	exit 0;
}

sub is_numeric {
	my $f = shift();
	if ($f =~ /^(\d+\.?\d*|\.\d+)$/) { return 1; }

	return 0;
}

# Set the foreground color
sub numeric_color {
	my $c    = shift();
	my $bold = shift();

	my $ret;
	if ($bold) {
		$ret .= "\e[1;38;5;${c}m";
	} else {
		$ret .= "\e[38;5;${c}m";
	}

	return $ret;
}

sub has_uppercase {
	my $str = shift();
	my $ret = 0;

	if ($str =~ /[A-Z]/) {
		$ret = 1;
	}

	return $ret;
}

sub longest_word {
	my @arr     = @_;
	my $longest = 0;

	foreach my $word (@arr) {
		my $len = length($word);

		if ($len > $longest) {
			$longest = $len;
		}
	}

	return $longest;
}

# vim: tabstop=4 shiftwidth=4 autoindent softtabstop=4
